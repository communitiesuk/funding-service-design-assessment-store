"""Migrate comments data to comments_update table.

Revision ID: af78512b644f
Revises: f0625240974a
Create Date: 2023-11-10 11:22:18.680876

"""

import uuid

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "af78512b644f"
down_revision = "f0625240974a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # migrate comments data form `comments` table to `comments_update` table
    connection = op.get_bind()
    query = sa.text("SELECT comment_id, comment, date_created FROM comments")
    comments = connection.execute(query)
    for comment_id, comment, date_created in comments:
        insert_query = sa.text(
            "INSERT INTO comments_update(id, comment_id, comment, date_created) "
            "VALUES (:uuid, :comment_id, :comment, :date_created) RETURNING id;"
        )
        params = {
            "uuid": str(uuid.uuid4()),
            "comment_id": comment_id,
            "comment": comment,
            "date_created": str(date_created),
        }
        connection.execute(insert_query, params)

    with op.batch_alter_table("comments", schema=None) as batch_op:
        batch_op.drop_column("comment")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table("comments", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "comment",
                sa.TEXT(),
                autoincrement=False,
                nullable=True,
                default="",
            )
        )

    # migrate latest comments data form `comments_update` table to `comments` table
    connection = op.get_bind()
    comments_query = sa.text("SELECT comment_id, date_created FROM comments")
    comments_update_query = sa.text("SELECT id, comment_id, comment, date_created FROM comments_update")
    comments = connection.execute(comments_query)
    comments_update = connection.execute(comments_update_query)
    comments_update_dict = {}
    for id, comment_id, comment, date_created in comments_update:
        if comments_update_dict.get(comment_id):
            comments_update_dict[comment_id].append({"id": id, "comment": comment, "date_created": date_created})

        else:
            comments_update_dict[comment_id] = [{"id": id, "comment": comment, "date_created": date_created}]

    for comment_id, date_created in comments:
        for i_comment_id, val in comments_update_dict.items():
            val = sorted(val, key=lambda x: x["date_created"])
            if comment_id == i_comment_id:
                update_query = sa.text("UPDATE comments SET comment = :comment WHERE comment_id = :comment_id")
                params = {
                    "comment_id": comment_id,
                    "comment": val[-1]["comment"],
                }
                connection.execute(update_query, params)
                break

    op.alter_column("comments", "comment", nullable=False)

    # ### end Alembic commands ###
