"""Empty message.

Revision ID: 55dcd4abf66a
Revises: 6277d910baa8
Create Date: 2023-07-10 16:49:35.360072

"""
import uuid

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "55dcd4abf66a"
down_revision = "6277d910baa8"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag_types",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("purpose", sa.String(length=255), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tag_types")),
        sa.UniqueConstraint("purpose", name=op.f("uq_tag_types_purpose")),
    )
    op.create_table(
        "tags",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("value", sa.String(length=255), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("type_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("fund_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("round_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("creator_user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["tag_types.id"],
            name=op.f("fk_tags_type_id_tag_types"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tags")),
    )

    op.execute(sa.text("CREATE UNIQUE INDEX value_round_id_unique_idx ON tags (lower(value), round_id)"))

    op.create_table(
        "tag_association",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("application_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("associated", sa.Boolean(), nullable=False),
        sa.Column("tag_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("user_id", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["assessment_records.application_id"],
            name=op.f("fk_tag_association_application_id_assessment_records"),
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tags.id"],
            name=op.f("fk_tag_association_tag_id_tags"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tag_association")),
    )

    # Insert initial data into tag_meta table
    op.bulk_insert(
        sa.Table(
            "tag_types",
            sa.MetaData(),
            sa.Column("id", sa.String(), nullable=False),
            sa.Column("purpose", sa.String(length=255), nullable=False),
            sa.Column("description", sa.String(length=255), nullable=False),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("purpose", name="uq_tag_types_purpose"),
        ),
        [
            {
                "id": str(uuid.uuid4()),
                "purpose": "GENERAL",
                "description": "Use to categorise projects, such as by organisation or location",
            },
            {
                "id": str(uuid.uuid4()),
                "purpose": "PEOPLE",
                "description": "Use these tags to assign assessments to team members. "
                "Note: you cannot send notifications using tags",
            },
            {
                "id": str(uuid.uuid4()),
                "purpose": "POSITIVE",
                "description": "Use to indicate that a project has passed an assessment stage or is recommended",
            },
            {
                "id": str(uuid.uuid4()),
                "purpose": "NEGATIVE",
                "description": "Use to indicate that a project has failed an assessment stage or is not recommended",
            },
            {
                "id": str(uuid.uuid4()),
                "purpose": "ACTION",
                "description": "Use to recommend an action, such as further discussion",
            },
        ],
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tag_association")
    op.drop_table("tags")
    op.drop_table("tag_types")
    # ### end Alembic commands ###
