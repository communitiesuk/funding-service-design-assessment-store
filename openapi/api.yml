openapi: "3.0.0"
info:
  description: Assessment API for DLUHC Funding Service Design
  version: "1.0.0"
  title: Funding Service Design - Assessment Store
tags:
  - name: assessments
    description: Assessment operations
  - name: scores
    description: Score operations
  - name: flags
    description: Flag operations

paths:
  '/application_overviews/{fund_id}/{round_id}':
    parameters:
    - name: fund_id
      in: path
      required: true
      schema:
        type: string
        format: path
    - name: round_id
      in: path
      required: true
      schema:
        type: string
        format: path
    - name: search_in
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: funding_type
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: search_term
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: asset_type
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: status
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: countries
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: filter_by_tag
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: country
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: region
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: local_authority
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: joint_application
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: cohort
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: publish_datasets
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: datasets
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    - name: team_in_place
      in: query
      style: form
      schema:
        type: string
        format: query
      required: false
      explode: true
    get:
      tags:
        - assessments
      summary: Search assessments
      description: List all assessments
      operationId: api.routes.all_assessments_for_fund_round_id
      responses:
        200:
          description: SUCCESS - A list of assessments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/Assessment'
  '/assessments/get-stats/{fund_id}':
    post:
      parameters:
        - name: fund_id
          in: path
          required: true
          schema:
            type: string
            format: path
        - name: search_term
          in: query
          style: form
          schema:
            type: string
            format: query
          required: false
          explode: true
        - name: asset_type
          in: query
          style: form
          schema:
            type: string
            format: query
          required: false
          explode: true
        - name: status
          in: query
          style: form
          schema:
            type: string
            format: query
          required: false
          explode: true
        - name: search_in
          in: query
          style: form
          schema:
            type: string
            format: query
          required: false
          explode: true
        - name: funding_type
          in: query
          style: form
          schema:
            type: string
            format: query
          required: false
          explode: true
        - name: countries
          in: query
          style: form
          schema:
            type: string
            format: query
          required: false
          explode: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                round_ids:
                  type: array
                  items:
                    type: string
      tags:
        - assessments
      summary: Get assessment stats for multiple rounds
      description: Get a selection of required metrics for multiple rounds
      operationId: api.routes.assessment_stats_for_multiple_round_ids
      responses:
        200:
          description: SUCCESS - A mapping of round_id to a collection of assessment metrics
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: 'components.yml#/components/schemas/AssessmentsStats'
# TODO: Remove old API endpoint once the new endpoint is fully deployed and confirmed stable. Ensure all frontend services are updated to utilize the new endpoint before removal.
  '/assessments/get-stats/{fund_id}/{round_id}':
    parameters:
      - name: fund_id
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: round_id
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: search_term
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: asset_type
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: status
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: search_in
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: funding_type
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: countries
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
    get:
      tags:
        - assessments
      summary: Get assessment stats
      description: Get a selection of required metrics
      operationId: api.routes.assessment_stats_for_fund_round_id
      responses:
        200:
          description: SUCCESS - A collection of assessment metrics
          content:
            application/json:
              schema:
                type: object
                $ref: 'components.yml#/components/schemas/AssessmentsStats'
  '/assessments/get-team-flag-stats/{fund_id}/{round_id}':
    parameters:
      - name: fund_id
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: round_id
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: search_term
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: asset_type
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: status
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: search_in
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: funding_type
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
      - name: countries
        in: query
        style: form
        schema:
          type: string
          format: query
        required: false
        explode: true
    get:
      tags:
        - assessments
      summary: Get team flagging stats
      description: Get a selection of required metrics
      operationId: api.routes.get_team_flag_stats
      responses:
        200:
          description: SUCCESS - A collection of assessment metrics
          content:
            application/json:
              schema:
                type: object
                $ref: 'components.yml#/components/schemas/TeamFlagStats'
  '/score':
    get:
      tags:
        - scores
      summary: get score for subcriteria in application
      description: get a score for a subcriteria in an application
      operationId: api.routes.get_score_for_application_sub_criteria
      responses:
        200:
          description: SUCCESS - Score for Subcriteria in Application
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/Score'
      parameters:
      - name: application_id
        in: query
        schema:
          type: string
        required: true
      - name: sub_criteria_id
        in: query
        schema:
          type: string
        required: false
      - name: score_history
        in: query
        schema:
          type: boolean
        required: false
      - name: score
        in: query
        schema:
          type: integer
        required: false
      - name: justification
        in: query
        schema:
          type: string
        required: false
      - name: date_created
        in: query
        schema:
          type: string
        required: false
      - name: user_id
        in: query
        schema:
          type: string
        required: false
    post:
      tags:
        - scores
      summary: post score for subcriteria in application
      description: post a score for a subcriteria in an application
      operationId: api.routes.post_score_for_application_sub_criteria
      requestBody:
        description: Score creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PostScore'
            example:
              score: 3
              justification: 'bang average'
              application_id: 'r3p1ac33-7412-4991-c4t1-c41cbf4d3bbd'
              sub_criteria_id: 'app-info'
              user_id: 'gio'
      responses:
        201:
          description: SUCCESS - Score for Subcriteria in Application Submitted
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/Score'
        401:
          description: ERROR - Could not Save Score
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 401
                status: 'error'
                message: 'Could not save Score for application sub-criteria'
  '/flag_data':
    get:
      tags:
        - flags
      summary: get assessment flag data by flag id
      description: get assessment flag data by flag id
      operationId: api.routes.get_flag
      responses:
        200:
          description: SUCCESS - Flags
          content:
            application/json:
              schema:
                type: object
      parameters:
      - name: flag_id
        in: query
        schema:
          type: string
        required: true
  '/sub_criteria_overview/{application_id}/{sub_criteria_id}':
    parameters:
    - name: application_id
      in: path
      required: true
      schema:
        type: string
        format: path
    - name: sub_criteria_id
      in: path
      required: true
      schema:
        type: string
        format: path
    get:
      tags:
        - assessments
      summary: Sub criteria
      description: Returns sub criteria metadata and themes for an applications sub-criteria
      operationId: api.routes.sub_criteria
      responses:
        200:
          description: SUCCESS - A subcriteria
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/SubCriteria'
  '/application/{application_id}/metadata':
    parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: string
          format: path
    get:
      tags:
        - assessments
      summary: Retrieve the metadata for a specific application ID
      description: Retrieve the metadata for a specific application ID
      operationId: api.routes.assessment_metadata_for_application_id
      responses:
        200:
          description: SUCCESS - application metadata
          content:
            application/json:
              schema:
                type: object

  '/application/{application_id}/json':
    parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: string
          format: path
    get:
      tags:
        - assessments
      summary: Retrieve the full application JSON blob for this applicaiton ID
      description: Retrieve the full application JSON blob for this applicaiton ID
      operationId: api.routes.get_application_json
      responses:
        200:
          description: SUCCESS - application json
          content:
            application/json:
              schema:
                type: object
  '/application/{application_id}/status/complete':
    parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: string
          format: path
    post:
      tags:
        - assessments
      summary: Update application status to completed
      description: Update application status to completed
      operationId: api.routes.update_ar_status_to_completed
      responses:
       204:
          description: Successfully updated application status to completed.

  '/sub_criteria_overview/banner_state/{application_id}':
    parameters:
    - name: application_id
      in: path
      required: true
      schema:
        type: string
        format: path
    get:
      tags:
        - assessments
      summary: Banner state
      description: Returns state of banner for an application
      operationId: api.routes.get_banner_state
      responses:
        200:
          description: SUCCESS - Banner state
          content:
            application/json:
              schema:
                type: object
                properties:
                  short_id:
                    type: string
                    example: "FUNDX_R2"
                  funding_amount_requested:
                    type: number
                    example: 100000
                  project_name:
                    type: string
                    example: "Refurbish the community centre."
                  fund_id:
                    type: string
                    example: "12345678abcdefgh"
                  workflow_status:
                    type: string
                    example: "COMPLETED"
  '/application_overviews/{application_id}':
    parameters:
    - name: application_id
      in: path
      required: true
      schema:
        type: string
        format: path
    get:
      tags:
        - assessments
      summary: Retrieves data to populate the assessors task list page for a given application
      description: Retrieves data to populate the assessors task list page for a given application
      operationId: api.routes.get_assessor_task_list_state
      responses:
        200:
          description: SUCCESS - Accessor task list state
          content:
            application/json:
              schema:
                type: object
                $ref: 'assessor_task_list.yml#/components/schemas/AssessorTaskListState'
  '/sub_criteria_themes/{application_id}':
    parameters:
    - name: application_id
      in: path
      required: true
      schema:
        type: string
        format: path
    get:
      tags:
        - assessments
      summary: Retrieves application json and sub criterias
      description: Retrieves application json and sub criterias
      operationId: api.routes.get_application_json_and_sub_criterias
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              example:
                {}
        500:
          description: "Bad request - Incorrect application_id or theme_id"
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/GeneralError'
  '/comment':
    get:
      tags:
        - comments
      summary: get comments for subcriteria in application
      description: get comments in an application
      operationId: api.routes.get_comments
      responses:
        200:
          description: SUCCESS - A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/Comment'
      parameters:
      - name: application_id
        in: query
        schema:
          type: string
        required: false
      - name: sub_criteria_id
        in: query
        schema:
          type: string
        required: false
      - name: theme_id
        in: query
        schema:
          type: string
        required: false
      - name: comment_id
        in: query
        schema:
          type: string
        required: false
      - name: comment
        in: query
        schema:
          type: string
        required: false
      - name: date_created
        in: query
        schema:
          type: string
        required: false
      - name: user_id
        in: query
        schema:
          type: string
        required: false
      - name: comment_type
        in: query
        schema:
          type: string
        required: false
    post:
      tags:
        - comments
      summary: post a comment for subcriteria in application
      description: post a comment for a subcriteria in an application
      operationId: api.routes.post_comments
      requestBody:
        description: Comment creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PostComment'
            example:
              application_id: 'r3p1ac33-7412-4991-c4t1-c41cbf4d3bbd'
              comment: 'Please provide more information'
              user_id: 'abu'
              sub_criteria_id: 'app-info'
              comment_type: 'COMMENT'
              theme_id: "something"
      responses:
        201:
          description: SUCCESS - Comment for Subcriteria in Application Submitted
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/Comment'
    put:
      tags:
        - comments
      summary: update a comment for subcriteria in application
      description: edit a comment for a subcriteria in an application
      operationId: api.routes.put_comments
      requestBody:
        description: Comment creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PutComment'
            example:
              comment: 'Please provide more information'
              comment_id: 'abu'
      responses:
        201:
          description: SUCCESS - Comment for Subcriteria in Application Submitted
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/Comment'
  '/progress/{fund_id}/{round_id}':
    parameters:
    - name: fund_id
      in: path
      required: true
      schema:
        type: string
        format: path
    - name: round_id
      in: path
      required: true
      schema:
        type: string
        format: path
    post:
      tags:
        - progress
      summary: post % progress for an application
      description: get % progress for an application
      operationId: api.routes.post_progress_for_applications
      responses:
        200:
          description: SUCCESS - % progress for an application
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/Progress'
        400:
          description: "Bad request - Incorrect application_id or application_ids"
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/GeneralError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                application_ids:
                  type: array
                  items:
                    type: string
    get:
      tags:
        - progress
      summary: get % progress for an application
      description: get % progress for an application
      operationId: api.routes.get_progress_for_applications
      responses:
        200:
          description: SUCCESS - % progress for an application
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/Progress'
        400:
          description: "Bad request - Incorrect application_id or application_ids"
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/GeneralError'
      parameters:
      - name: application_ids
        in: query
        schema:
            type: array
            items:
              type: string
        required: true
  '/flags/{application_id}':
    get:
      tags:
        - flags
      summary: get all flags for an application, with updates
      operationId: api.routes.get_all_flags_for_application
      parameters:
      - name: application_id
        in: path
        schema:
          type: string
        required: true
      responses:
        200:
          description: SUCCESS - Flags for an Application
          content:
            application/json:
              schema:
                type: array
  '/flags/':
    post:
      tags:
        - flags
      summary: create a new flag for an application
      description: post a flag for an application
      operationId: api.routes.create_flag_for_application
      requestBody:
        description: Flag creation parameters
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              allocation: 'TEAM_1'
              status: 0
              sections_to_flag: ['section_1']
              user_id: '4d9d95c1-d40b-43fb-987a-d5339ec9c0b8'
              justification: 'some text'
              application_id: '0b053e71-15f7-4ba8-86d7-3e3b9e4c6fde'

      responses:
        201:
          description: SUCCESS - Flag for Application Submitted
          content:
            application/json:
              schema:
                type: object
        400:
          description: ERROR - Could not Save Flag
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 401
                status: 'error'
                message: 'Could not save Flag for application'
    put:
      tags:
        - flags
      summary: update a flag for an application
      description: put a flag for an application
      operationId: api.routes.update_flag_for_application
      requestBody:
        description: Flag update parameters
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              justification: 'some text'
              assessment_flag_id: '39085144-1ee3-4a3d-a44d-073162394b14'
              status: 0
              allocation: 'TEAM_1'
              user_id: '3cc94302-7d0a-4b01-a82e-2e8a4696d7f2'

      responses:
        201:
          description: SUCCESS - Flag for Application updated
          content:
            application/json:
              schema:
                type: object
        400:
          description: ERROR - Could not Save Flag
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 401
                status: 'error'
                message: 'Could not save Flag for application'

  '/qa_complete/{application_id}/{user_id}':
    post:
      tags:
        - qa_complete
      summary: create a qa_complete record for an application
      description: post a qa_complete record for an application
      operationId: api.routes.post_qa_complete_for_application
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          format: path
      responses:
        200:
          description: SUCCESS - Application updated to QA_COMPLETE
          content:
            application/json:
              schema:
                type: object
        401:
          description: ERROR - Could not mark application as QA_COMPLETE
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 401
                status: 'error'
                message: 'Could not mark application as QA_COMPLETE'

  '/qa_complete/{application_id}':
    get:
      tags:
        - qa_complete
      summary: get qa_complete record for application
      description: get qa_complete record for application
      operationId: api.routes.qa_complete_record_for_application
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: string
          format: path
      responses:
        200:
          description: SUCCESS - qa_complete record for application
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/QaCompleteRecord'
        404:
          description: ERROR - Could not get qa_complete record
          content:
            application/json:
              schema:
                $ref: 'components.yml#/components/schemas/Error'
              example:
                code: 404
                status: 'error'
                message: 'Could not get qa_complete record for application'
  '/application/{application_id}/tag':
    get:
      tags:
        - tag management
      summary: Get all active tag associations for an assessment
      description: returns all active tag associations for an assessment
      operationId: api.routes.tag_routes.get_active_tags_associated_with_assessment
      parameters:
        - name: application_id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: SUCCESS - A list of assessment tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/TagAssociation'
    put:
      tags:
        - tag management
      summary: Put a list of tags associated with an assessment
      description: Put a list of tags associated with an assessment
      operationId: api.routes.tag_routes.associate_tags_with_assessment
      parameters:
        - name: application_id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        description: Tag association creation parameters
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'components.yml#/components/schemas/PostTagAssociation'
      responses:
        201:
          description: SUCCESS - Tag Submitted
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/TagAssociation'

  '/application/{application_id}/tags':
    get:
      tags:
        - tag management
      summary: Get all tags associated to application_id
      description: returns all active tag associations for an application
      operationId: api.routes.tag_routes.get_all_tags_associated_with_application
      parameters:
        - name: application_id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: SUCCESS - A list of assessment tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/TagAssociation'
  '/funds/{fund_id}/rounds/{round_id}/tags/{tag_id}':
    get:
      tags:
        - tag management
      summary: Get a specific tag
      description: Returns the tag
      operationId: api.routes.tag_routes.get_tag
      parameters:
        - in: path
          name: fund_id
          schema:
            type: string
          required: true
        - in: path
          name: round_id
          schema:
            type: string
          required: true
        - in: path
          name: tag_id
          schema:
            type: string
          required: true
      responses:
        200:
          description: A tag for the given fund-round and tag_id.
          content:
            application/json:
              schema:
                $ref : 'components.yml#/components/schemas/Tag'
        404:
          description: "Tag not found for fund-round and tag_id provided."
          content:
            application/json:
              schema:
                $ref: "components.yml#/components/schemas/Error"
  '/funds/{fund_id}/rounds/{round_id}/tags':
    get:
      tags:
        - tag management
      summary: Get all the tags associated with the provided fund ID and a round ID.
      description: Returns the tags associated with the provided fund ID and a round ID.
      operationId: api.routes.tag_routes.get_tags_for_fund_round
      parameters:
        - in: path
          name: fund_id
          schema:
            type: string
          required: true
        - in: path
          name: round_id
          schema:
            type: string
          required: true
        - name: tag_purpose
          in: query
          schema:
            type: string
          required: false
        - name: tag_status
          in: query
          schema:
            type: boolean
          required: false
        - name: search_term
          in: query
          schema:
            type: string
          required: false
        - name: search_in
          in: query
          schema:
            type: string
          required: false
      responses:
        200:
          description: A list of tags for the given fund-round.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref : 'components.yml#/components/schemas/Tag'
        404:
          description: "Tags not found for fund-round provided."
          content:
            application/json:
              schema:
                $ref: "components.yml#/components/schemas/Error"
    post:
      tags:
        - tag management
      summary: Post a new tag for a fund round
      description: Post a new tag for a fund round
      operationId: api.routes.tag_routes.add_tag_for_fund_round
      parameters:
        - in: path
          name: fund_id
          schema:
            type: string
          required: true
        - in: path
          name: round_id
          schema:
            type: string
          required: true
      requestBody:
        description: Tag creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: 'components.yml#/components/schemas/PostTag'
      responses:
        201:
          description: SUCCESS - Tag Submitted
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/Tag'
    put:
      tags:
        - tag management
      summary: Update a tag for a fund round
      description: Update a tag for a fund round
      operationId: api.routes.tag_routes.update_tags_for_fund_round
      parameters:
        - in: path
          name: fund_id
          schema:
            type: string
          required: true
        - in: path
          name: round_id
          schema:
            type: string
          required: true
      requestBody:
        description: Tag creation parameters
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: 'components.yml#/components/schemas/PutTag'
      responses:
        200:
          description: SUCCESS - Tag Updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/Tag'

  '/tag_types':
    get:
      tags:
        - tag management
      summary: Get all tag types
      description: returns all tag types
      operationId: api.routes.tag_routes.get_tag_types
      responses:
        200:
          description: SUCCESS - A list of tag types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/TagType'
  '/application_fields_export/{fund_id}/{round_id}/{report_type}':
      parameters:
      - name: fund_id
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: round_id
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: report_type
        in: path
        required: true
        schema:
          type: string
          format: path
      get:
        tags:
          - assessments
        summary: Search assessments for export by fields
        description: List all assessments for export
        operationId: api.routes.get_application_data_for_export
        responses:
          200:
            description: SUCCESS - A list of assessments information for export
            content:
              application/json:
                schema:
                  type: object
  '/scoring-system/{round_id}':
      parameters:
      - name: round_id
        in: path
        required: true
        schema:
          type: string
          format: path
      get:
        tags:
          - scores
        summary: Return assessment scoring system for a round
        description: Return assessment scoring system for a round
        operationId: api.routes.get_scoring_system_for_round
        responses:
          200:
            description: SUCCESS - A list of tag types
            content:
              application/json:
                schema:
                  type: object
                  items:
                    $ref: 'components.yml#/components/schemas/ScoringSystem'
  '/application/{application_id}/users':
    get:
      tags:
        - application user association
      summary: Get all users that are assigned the application
      description: returns all users assigned to the application
      operationId: api.routes.user_routes.get_all_users_associated_with_application
      parameters:
        - name: application_id
          in: path
          schema:
            type: string
          required: true
        - name: active
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: SUCCESS - A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/UserAssociation'
  '/application/{application_id}/user/{user_id}':
    get:
      tags:
        - application user association
      summary: Get the association corresponding to the user and the application
      description: returns the assocation for the user and application, if it exists
      operationId: api.routes.user_routes.get_user_application_association
      parameters:
        - name: application_id
          in: path
          schema:
            type: string
          required: true
        - name: user_id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: SUCCESS - An user application association
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/UserAssociation'
    post:
      tags:
        - application user association
      summary: Create a new association between user and application
      description: Post a new association between user and application
      operationId: api.routes.user_routes.add_user_application_association
      parameters:
        - name: application_id
          in: path
          schema:
            type: string
          required: true
        - name: user_id
          in: path
          schema:
            type: string
          required: true
      responses:
        201:
          description: SUCCESS - Association created
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/UserAssociation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assigner_id:
                  type: string
    put:
      tags:
        - application user association
      summary: Activate or deactivate an association between a user and an application
      description: Activate or deactivate an between a user and an application
      operationId: api.routes.user_routes.update_user_application_association
      parameters:
        - in: path
          name: application_id
          schema:
            type: string
          required: true
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      requestBody:
        description: Association parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
               $ref: 'components.yml#/components/schemas/PutUserAssociation'
      responses:
        200:
          description: SUCCESS - Association Updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yml#/components/schemas/UserAssociation'
  '/user/{user_id}/applications':
    get:
      tags:
        - application user association
      summary: Get all applications that are assigned to the user
      description: returns all applications assigned to the user
      operationId: api.routes.user_routes.get_all_applications_associated_with_user
      parameters:
        - name: user_id
          in: path
          schema:
            type: string
          required: true
        - name: active
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: SUCCESS - A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/UserAssociation'
  '/user/{assigner_id}/assignees':
    get:
      tags:
        - application user association
      summary: Get all users associations that have been assigned by the user
      description: returns all users associations that have been assigned by the user
      operationId: api.routes.user_routes.get_all_associations_assigned_by_user
      parameters:
        - name: assigner_id
          in: path
          schema:
            type: string
          required: true
        - name: active
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: SUCCESS - A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yml#/components/schemas/UserAssociation'
